//to run coding, command + shift + enter
//to run individualy, press play botton on left side of code

import UIKit

var greeting = "Hello, playground"

//let to define one constant
//var to define one variable
let constantA = 10
var numberA = 10
var resultA = constantA + numberA

//constant value can't be changed
//constant = 50
//but variable value can be changed
numberA = 20

//add Int infront define value as integer
let constantB: Int = 10
var numberB: Int = 10
var resultB: Int = numberB + constantB

//use option botton to check types of variables
//types
    //Int - integer
    //Double - float
    //String - string
    //Bool - boolean
var constantC = 10 //constantC is a integer
var numberC = 10.5 //numberC is a double (float)

//string
var messageA = "The best way to learn Swift is to stop talking and code"

//string operator - +
var greetingA = "Hello "
var nameTim = "Tim"
var greetingMessage = greetingA + nameTim

//all words uppercase or lowercase
//using uppercase and lowercase
greetingMessage.uppercased()
greetingMessage.lowercased()

//count words
greetingMessage.count

//string operator - *
var bookPrice = 30
var bookSales = 5
var totalEarning = bookPrice * bookSales

//var totalEarningMessage = "Your total earning of books is $" + totalEarning
    //appear "Binary operator '+' cannot be applied to operands of type 'String' and 'Int'"
    //swift can not using different types of variables with operators
    //try changing all variables into string
var totalEarningMessageA = "Your total earning of books is $" + String(totalEarning)
//string interpolations
    //will do the same from above
var totalEarningMessageB = "Your total earning of books is $\(totalEarning)"

//if then else
//ex1
var timeYouWakeUp = 6

if timeYouWakeUp == 6 {
    print("Cook yourself a big breakfast!")
} else {
    print("Go out for breakfast")
}
//ex1 using switch
var timeYouWakeUpA = 6

switch timeYouWakeUpA {
case 6:
    print("Cook yourself a big breakfast!")
default:
    print("Go out for breakfast")
}
//ex2
var bonusA = 5000

if bonusA >= 10000 {
    print("I will travel to Paris and London!")
} else if bonusA >= 5000 && bonusA < 10000 {         //define two operator using &&
    print("I will travel to Tokyo")
} else if bonusA >= 1000 && bonusA < 5000 {
    print("I will travel to Bangkok")
} else {
    print("Just stay home")
}
//ex2 using switch
var bonusB = 5000

switch bonusB {
case 10000...:
    print("I will travel to Paris and London!")
case 5000...9999:
    print("I will travel to Tokyo")
case 1000...4999:
    print("I will travel to Bangkok")
default:
    print("Just stay home")
}

//array
var book1 = "Tools of Titans"
var book2 = "Rework"
var book3 = "Your Move"
var bookCollection = ["Tool of Titans", "Rework", "Your Move"]
bookCollection[0]
bookCollection.append("Authority")       //using .append to add new objects into array
bookCollection.count                     //using .count to check numbers of objects into array

//print out objects in array
print(bookCollection[0])
print(bookCollection[1])
print(bookCollection[2])
print(bookCollection[3])
//efficient way using for in loop
for index in 0...3 {
    print(bookCollection[index])
}
//or
for index in 0...bookCollection.count - 1 {
    print(bookCollection[index])
}
//or
for book in bookCollection {
    print(book)
}

//dictionary
var bookCollectionDict = ["1328683788": "Tool of Titans", "0307463745": "Rework", "1612060919": "Authority"]
bookCollectionDict["0307463745"]
//print all keys and values
for (key, value) in bookCollectionDict {
    print("ISBN: \(key)")
    print("Title: \(value)")
}
//the output will not be ordered cause type is dictionary

//emoji
var emojiDict: [String : String] = [ "👻" : "ghost",
                                     "🛩️" : "airplane",
                                     "🤩" : "happy" ]// 填入初始化字典的程式 //

var wordToLookup = "👻"                 //emoji key
var meaning = emojiDict[wordToLookup]   //add find dir

wordToLookup = "🛩️"                     //emoji key
meaning = emojiDict[wordToLookup]       //add find dir
//print(meaning)
    //warning (yellow) :Expression implicitly coerced from 'String?' to 'Any'
    //result :"Optional("airplane")\n"
    //Optional happen when app tries to load a variable without value
//using ? to set one variable type to optional (can be no value included)
var jobTitle: String?        //result :nil

//to pass optional
//using if
jobTitle = "iOS development"
//var message = "Your job title is " + jobTitle
    //error :Value of optional type 'String?' must be unwrapped to a value of type 'String' //because have optional type variable
if jobTitle != nil {
    var message = "Your job title is " + jobTitle!
    print(message)
}

//using if let
if let jobTitle = jobTitle {
    var message = "Your job title is " + jobTitle
    print(message)
}
